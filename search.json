[{"path":"https://paulmelloy.github.io/epiphytoolR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 epiphytoolR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Melloy. Author, maintainer. Adam H. Sparks. Contributor.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Melloy P (2024). epiphytoolR: Epiphytotic Modeling Tools. R package version 0.0.2, https://paulmelloy.github.io/epiphytoolR/.","code":"@Manual{,   title = {epiphytoolR: Epiphytotic Modeling Tools},   author = {Paul Melloy},   year = {2024},   note = {R package version 0.0.2},   url = {https://paulmelloy.github.io/epiphytoolR/}, }"},{"path":"https://paulmelloy.github.io/epiphytoolR/index.html","id":"epiphytoolr","dir":"","previous_headings":"","what":"Epiphytotic Modeling Tools","title":"Epiphytotic Modeling Tools","text":"R package provides functions undertaking epiphytotic modelling simulation studies R. package provides common base level functions can used modelling spatial movement splash wind dispersed plant disease inoculum. package also provides many weather functions obtaining, formating imputing weather data.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Epiphytotic Modeling Tools","text":"epiphytoolR CRAN currently development ad hoc manner. can install stable version main branch following code can install development version dev branch following code dev branch newer bug fixes features, see NEWS.md Report bugs add requests creating issue repo","code":"remotes::install_github(\"PaulMelloy/epiphytoolR\") remotes::install_github(\"PaulMelloy/epiphytoolR\", ref = \"dev\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate area under the disease progress curve — Audpc","title":"Calculate area under the disease progress curve — Audpc","text":"Calculate area disease progress curve","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate area under the disease progress curve — Audpc","text":"","code":"Audpc(evaluation, dates, type = \"absolute\", na.rm = FALSE)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate area under the disease progress curve — Audpc","text":"evaluation Table data evaluations: Data frame dates Vector dates corresponding evaluation type relative, absolute na.rm weather remove NA values return NA NA vales","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate area under the disease progress curve — Audpc","text":"Vector relative absolute audpc.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate area under the disease progress curve — Audpc","text":"wrapper agricolae checks NA values return NA values specified argument see helpagricolae::audpc details.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/Audpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate area under the disease progress curve — Audpc","text":"","code":"# see examples in help(agricolae::audpc) dates<-c(14,21,28) # days # example 1: evaluation - vector evaluation<-c(40,80,90) Audpc(evaluation,dates) #> evaluation  #>       1015  dates<-c(14,21,NA) # days Audpc(evaluation,dates) #> [1] NA # agricolae::audpc(evaluation,dates) dates<-c(14,21,28) # days evaluation<-c(40,80,NA) Audpc(evaluation,dates) #> [1] NA # agricolae::audpc(evaluation,dates)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Infection Values — DIV","title":"Daily Infection Values — DIV","text":"Calculates Temperature index day hour j. Temperature index used calculate Daily Infection Values (DIV) model published Shoeny et. al (2007).","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Infection Values — DIV","text":"","code":"DIV(RH, Tm, rainfall = 0.2)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily Infection Values — DIV","text":"https://doi.org/10.1007/978-1-4020-6065-6_9","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daily Infection Values — DIV","text":"RH relative humitiy percentage (numeric) Tm daily average temperature degrees celcius rainfall daily rainfall millimeters","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daily Infection Values — DIV","text":"infection value day ranging 0 (fungal growth) 1 (optimal growth)","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily Infection Values — DIV","text":"Formula adapted Schoeny. et al. (2007) European Journal Plant Pathology.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily Infection Values — DIV","text":"","code":"DIV(70,20, rainfall = 0) #> [1] 1"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Infection Value - temperature index — DIV_Tm_index","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"Calculates Temperature index day hour j. Temperature index used calculate Daily Infection Values (DIV) model published Shoeny et. al (2007).","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"","code":"DIV_Tm_index(temp, rainfall = 0.2)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"https://doi.org/10.1007/978-1-4020-6065-6_9","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"temp daily average temperature degrees celcius rainfall rainfall mm","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"Temperature index value (numeric), used calculating DIV","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"Formula adapted Schoeny. et al. (2007) European Journal Plant Pathology.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/DIV_Tm_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily Infection Value - temperature index — DIV_Tm_index","text":"","code":"DIV_Tm_index(25) #> [1] 0.7434944"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_estimated_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate estimated weather from coefficients — calc_estimated_weather","title":"Calculate estimated weather from coefficients — calc_estimated_weather","text":"Calculate estimated weather coefficients","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_estimated_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate estimated weather from coefficients — calc_estimated_weather","text":"","code":"calc_estimated_weather(   w,   start_date = \"2023-04-01\",   end_date = \"2023-11-30\",   lat,   lon,   n_stations = 1:4,   na.rm = FALSE )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_estimated_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate estimated weather from coefficients — calc_estimated_weather","text":"w data.table weather coefficients, output epiphytoolR::get_weather_coefs start_date character string date value indicating first date returning data.table Must ISO8601 format (YYYY-MM-DD), e.g. “2020-04-26” end_date character string date value indicating last date returning data.table Must ISO8601 format (YYYY-MM-DD), e.g. “2020-04-26” lat numeric, latitude query coordinates weather estimated. missing stations returned lon numeric, longitude query coordinates weather estimated.  missing stations returned n_stations integer vector integers indicating number station/s return closest (1), 3rd closest (3) closest five stations (1:5). ect na.rm logical, remove weather data stations NA rain_fall frequency Recommended. advise best way manually remove weather stations NAs correct weather data. argument available two options available user. Default FALSE","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_estimated_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate estimated weather from coefficients — calc_estimated_weather","text":"data.table output calculated get_weather_coefs.R following columns: station - Weather station name; lat - latitude; lon - longitude; rh - NA currently supported see epiphytoolR github issue #14; yearday - integer, day year, see data.table::yday(); wd_rd - numeric, mean wind direction raw data; wd_sd_rd - numeric, standard deviation wind direction raw data; ws_rd - numeric, mean wind speed raw data; ws_sd_rd - numeric, standard deviation wind speed raw data; rain_freq - numeric, proportional chance rainfall dat 0 - 1 can formated format_weather()","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_estimated_weather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate estimated weather from coefficients — calc_estimated_weather","text":"","code":"dat <- data.frame(   station_name = \"w_STATION\",   lat = -runif(1, 15.5, 28),   lon = runif(1, 115, 150),   state = \"SA\",   yearday = 1:365,   wd_rw = abs(rnorm(365, 180, 90)),   wd_sd_rw = rnorm(365, 80, 20),   ws_rw = runif(365, 1, 60),   ws_sd_rw = abs(rnorm(365, 10, sd = 5)),   rain_freq = runif(365, 0.05, 0.45)   )    calc_estimated_weather(w = dat,     lat = -25,     lon = 130,     n_stations = 1) #> Warning: 'max_temp' and 'min_temp' not detected, returning NAs for mean daily 'temp' #>                     times   station yearday       lat      lon  state    wd_rw #>                    <POSc>    <char>   <int>     <num>    <num> <char>    <num> #>    1: 2023-04-01 00:00:00 w_STATION      91 -16.50938 144.2017     SA 275.6792 #>    2: 2023-04-01 01:00:00 w_STATION      91 -16.50938 144.2017     SA 275.6792 #>    3: 2023-04-01 02:00:00 w_STATION      91 -16.50938 144.2017     SA 275.6792 #>    4: 2023-04-01 03:00:00 w_STATION      91 -16.50938 144.2017     SA 275.6792 #>    5: 2023-04-01 04:00:00 w_STATION      91 -16.50938 144.2017     SA 275.6792 #>   ---                                                                          #> 5829: 2023-11-29 20:00:00 w_STATION     333 -16.50938 144.2017     SA 164.7648 #> 5830: 2023-11-29 21:00:00 w_STATION     333 -16.50938 144.2017     SA 164.7648 #> 5831: 2023-11-29 22:00:00 w_STATION     333 -16.50938 144.2017     SA 164.7648 #> 5832: 2023-11-29 23:00:00 w_STATION     333 -16.50938 144.2017     SA 164.7648 #> 5833: 2023-11-30 00:00:00 w_STATION     334 -16.50938 144.2017     SA 206.5527 #>       wd_sd_rw     ws_rw  ws_sd_rw rain_freq distance    rh  rain  temp #>          <num>     <num>     <num>     <num>    <num> <num> <int> <num> #>    1: 80.07136 10.924185 13.696844 0.4303483 1752.619    NA     1    NA #>    2: 80.07136 10.924185 13.696844 0.4303483 1752.619    NA     1    NA #>    3: 80.07136 10.924185 13.696844 0.4303483 1752.619    NA     1    NA #>    4: 80.07136 10.924185 13.696844 0.4303483 1752.619    NA     1    NA #>    5: 80.07136 10.924185 13.696844 0.4303483 1752.619    NA     1    NA #>   ---                                                                   #> 5829: 91.00031  6.263042  3.451388 0.4428285 1752.619    NA     0    NA #> 5830: 91.00031  6.263042  3.451388 0.4428285 1752.619    NA     0    NA #> 5831: 91.00031  6.263042  3.451388 0.4428285 1752.619    NA     0    NA #> 5832: 91.00031  6.263042  3.451388 0.4428285 1752.619    NA     0    NA #> 5833: 80.56714 54.921931  6.464564 0.2794979 1752.619    NA     0    NA #>              ws       wd    wd_sd  YYYY    MM    DD    hh    mm #>           <num>    <num>    <num> <int> <int> <int> <int> <int> #>    1: 27.922806 275.6792 80.07136  2023     4     1     0     0 #>    2: 27.922806 275.6792 80.07136  2023     4     1     1     0 #>    3: 27.922806 275.6792 80.07136  2023     4     1     2     0 #>    4: 27.922806 275.6792 80.07136  2023     4     1     3     0 #>    5: 27.922806 275.6792 80.07136  2023     4     1     4     0 #>   ---                                                           #> 5829:  7.706564 164.7648 91.00031  2023    11    29    20     0 #> 5830:  7.706564 164.7648 91.00031  2023    11    29    21     0 #> 5831:  7.706564 164.7648 91.00031  2023    11    29    22     0 #> 5832:  7.706564 164.7648 91.00031  2023    11    29    23     0 #> 5833: 52.073548 206.5527 80.56714  2023    11    30     0     0"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate field-pea emergence — calc_fpea_emergence","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"Function calculates time, degree days, sowing emergence (50% sown seeds produces least one true leaf).","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"","code":"calc_fpea_emergence(sowing_date, hemisphere = \"south\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"https://doi.org/10.1007/978-1-4020-6065-6_9","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"sowing_date sowing date (date) hemisphere 'North' 'South' hemishere","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"number degree days predicted time sowing emergence","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"Formula adapted Schoeny. et al. (2007) European Journal Plant Pathology. Formula reported correlate R^2 = 0.91 pea cultivar Cheyenne grown west France","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_fpea_emergence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate field-pea emergence — calc_fpea_emergence","text":"","code":"calc_fpea_emergence(\"2021-05-10\") #> [1] 266.7598"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate saturated Vapour-pressure — calc_svp","title":"Calculate saturated Vapour-pressure — calc_svp","text":"formula uses Tetens (1930) equation described Murray (1967) calculate saturated vapour pressure temperature degrees Celsius.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate saturated Vapour-pressure — calc_svp","text":"","code":"calc_svp(Tm, eq = \"BOM\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate saturated Vapour-pressure — calc_svp","text":"Tm Temperature degrees Celsius eq Type equation use calculation VPD. defaults BOM (Bureau Meterology equation, Australia). options, \"Murray\" \"Sapak\"","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate saturated Vapour-pressure — calc_svp","text":"Saturated vapour-pressure kPa, class units","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate saturated Vapour-pressure — calc_svp","text":"https://doi.org/10.1175/1520-0450(1967)006<0203:OTCOSV>2.0.CO;2","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_svp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate saturated Vapour-pressure — calc_svp","text":"","code":"calc_svp(Tm = 30) #> 4.242794 [kPa] calc_svp(Tm = 30, eq = \"Murray\") #> 4.241806 [kPa]"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Vapour-pressure — calc_vp","title":"Calculate Vapour-pressure — calc_vp","text":"formula uses Tetens (1930) equation described Murray (1967) calculate vapour pressure temperature degrees Celsius relative humidity.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Vapour-pressure — calc_vp","text":"","code":"calc_vp(RH, Tm, dp = NULL, eq = \"BOM\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Vapour-pressure — calc_vp","text":"RH Relative humidity Tm Temperature degrees Celsius dp Dew point, degrees Celsius eq Type equation use calculation VPD. defaults BOM (Bureau Meterology equation, Australia). options, \"Murray\" \"Sapak\"","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Vapour-pressure — calc_vp","text":"Vapour-pressure kPa class units","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Vapour-pressure — calc_vp","text":"https://doi.org/10.1175/1520-0450(1967)006<0203:OTCOSV>2.0.CO;2","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Vapour-pressure — calc_vp","text":"","code":"calc_vp(RH = 99,Tm = 30) #> 4.200366 [kPa] calc_vp(RH = 99,Tm = 30, eq = \"Murray\") #> 4.199388 [kPa] calc_vp(dp = 10) #> 1.227935 [kPa]"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"formula uses Tetens (1930) equation described Murray (1967)","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"","code":"calc_vpd(RH, Tm, eq = \"BOM\", verbose = FALSE)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"RH Relative humidity Tm Temperature degrees Celsius eq Type equation use calculation VPD. defaults BOM (Bureau Meteorology equation, Australia). options, \"Murray\" \"Sapak\" verbose prints saturated vapour pressure (SVP) vapour pressure kPa returning VPD result","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"Vapour-pressure deficit kPa, class units","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"https://doi.org/10.1175/1520-0450(1967)006<0203:OTCOSV>2.0.CO;2","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/calc_vpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Vapour-pressure deficit from relative humidity and temperature — calc_vpd","text":"","code":"calc_vpd(RH = 99, Tm = 30) #> 0.04242794 [kPa]"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/check_weather_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check format_weather warnings — check_weather_warnings","title":"Check format_weather warnings — check_weather_warnings","text":"Print internal warnings produced running format_weather","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/check_weather_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check format_weather warnings — check_weather_warnings","text":"","code":"check_weather_warnings()"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/check_weather_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check format_weather warnings — check_weather_warnings","text":"lines messages function, type (either message warning) output message warning","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/check_weather_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check format_weather warnings — check_weather_warnings","text":"","code":"f <- function(x) {    warning(\"This is a warning\")    message(\"This is a message\")    x + x} epiphytoolR::.capture_warnings(f(1)) #> [1] 2 check_weather_warnings() #> f - warning - This is a warning -  #> message - This is a message #>  -"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the influence of 2 dimensional vectors — circular_influence","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"Calculate influence 2 dimensional vectors","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"","code":"circular_influence(x, offset = 0)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"x degrees (numeric), numeric length one offset degrees (numeric), angle function offset returned value 1.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"numeric double vector giving proportion influence two dimensions, 'x' dimension 'y' dimension -1 1","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"function determines circular vector influence 1 -1 scale. example wind blowing northerly vector (0 degrees) influence reduction. wind blows 90 degree angle influence north south plane.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/circular_influence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the influence of 2 dimensional vectors — circular_influence","text":"","code":"# Wind speed strength from a northerly wind ws <- 5 # kph wd <- 0 # degrees ws * circular_influence(wd) #> x y  #> 0 5   # Wind speed strength from a north east wind ws <- 5 # kph wd <- 45 # degrees ws * circular_influence(wd) #>        x        y  #> 3.535532 3.535536   # Wind speed strength from a south west wind ws <- 5 # kph wd <-225 # degrees ws * circular_influence(wd) #>         x         y  #> -3.535522 -3.535546"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/create_inf_xyz.html","id":null,"dir":"Reference","previous_headings":"","what":"Create xyz data.frame with z plots — create_inf_xyz","title":"Create xyz data.frame with z plots — create_inf_xyz","text":"Creates xy data.frame z column \"load\" specified value paddock plots","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/create_inf_xyz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create xyz data.frame with z plots — create_inf_xyz","text":"","code":"create_inf_xyz(   plot_length = 20,   plot_width = 10,   paddock_length = 100,   paddock_width = 100,   infected_plots = \"random\",   n_plots = 15,   infection_weight = 1,   external_buffer_end = 2,   external_buffer_adj = 2,   internal_buffer_adj = 1,   internal_buffer_end = 1,   verbose = FALSE )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/create_inf_xyz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create xyz data.frame with z plots — create_inf_xyz","text":"plot_length numeric, length experimental plots paddock (meters) plot_width numeric, width experimental plots paddock (meters) paddock_length numeric, length paddock (meters) paddock_width numeric, width paddock (meters) infected_plots numeric vector plot numbers infected. Plot 1 starts corner allocated across width (x) paddock plot numbers increase. Default \"random\" randomly assign infected n_plots quantity. n_plots numeric, number infected plots, used infected_plots specified \"random\" infection_weight value applied z load column infected plots external_buffer_end numeric, length buffers end paddock (meters) external_buffer_adj numeric, length buffers sides paddock (meters) internal_buffer_adj numeric, length buffers plots adjacent row direction (meters) internal_buffer_end numeric, length buffers plots ends row direction (meters) verbose logical, 'TRUE' function return message total plots extra length width meters","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/create_inf_xyz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create xyz data.frame with z plots — create_inf_xyz","text":"xyz data.frame colnames x,y amd load","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/create_inf_xyz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create xyz data.frame with z plots — create_inf_xyz","text":"","code":"p1 <- create_inf_xyz() plot(p1$x,p1$y) points(p1[p1$load > 0,\"x\"],        p1[p1$load > 0,\"y\"],        col = \"red\") points(p1[p1$load == 0,\"x\"],        p1[p1$load == 0,\"y\"],        col = \"darkgreen\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":null,"dir":"Reference","previous_headings":"","what":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"Estimates number girdleed field pea internodes end winter sum quantitative PCR blackspot pathogens, Didymella pinodes, Phoma medicaginis var pinodella P. koolunga. Formula described paper linked DOI ","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"","code":"disease_aug_soil(DNA_pg)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"https://doi.org/10.1094/PDIS-01-11-0077","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"DNA_pg Quantity DNA picograms per gram soil D. pinodes, P. medicaginis var pinodella P. koolunga.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"estimated number girdled field pea internodes end winter.","code":""},{"path":[]},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/disease_aug_soil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DiseaseAUGSoil - number of girdled internodes — disease_aug_soil","text":"","code":"disease_aug_soil(50) #> Warning: This formula is directly transcribed from literature however not reproduceable #> [1] 0.5119353"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/epiphytoolR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epiphytoolR: Epiphytotic Modeling Tools — epiphytoolR-package","title":"epiphytoolR: Epiphytotic Modeling Tools — epiphytoolR-package","text":"epiphytoolR provides functions undertaking epiphytotic modelling simulation studies R. package provides common base level functions can used modelling spatial movement splash wind dispersed plant disease inoculum.","code":""},{"path":[]},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/epiphytoolR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epiphytoolR: Epiphytotic Modeling Tools — epiphytoolR-package","text":"Maintainer: Paul Melloy p.melloy@uq.edu.au (ORCID) contributors: Adam H. Sparks adamhsparks@gmail.com (ORCID) [contributor]","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate blackspot primary inoculum — est_primary_inoculum","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"Estimate amount blackspot lesions per plant caused primary inoculumn, ascospores. Formula interpreted Schoeny. et al. (2007) European Journal Plant Pathology.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"","code":"est_primary_inoculum(degree_days, rainfall)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"https://doi.org/10.1007/978-1-4020-6065-6_9","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"degree_days sum degree days celcius 7 days rainfall vector daily rainfall, maximum rainfall week","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"number new blackspot lesions per plant 7 days","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/est_primary_inoculum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate blackspot primary inoculum — est_primary_inoculum","text":"","code":"est_primary_inoculum(degree_days = 250,                rainfall = 15) #> [1] 7.17275"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential dispersal kernel — exp_dk","title":"Exponential dispersal kernel — exp_dk","text":"Exponential dispersal kernel function described Karisto et al. (2022)","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential dispersal kernel — exp_dk","text":"","code":"exp_dk(r, a = 1)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential dispersal kernel — exp_dk","text":"r Distance source destination Scale parameter","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential dispersal kernel — exp_dk","text":"numeric value indicating ","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exponential dispersal kernel — exp_dk","text":"Petteri Karisto, Frédéric Suffert Alexey Mikaberidze. (2022). Measuring Splash Dispersal Major Wheat Pathogen Field. PhytoFrontiers™ 2, 30-40.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/exp_dk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential dispersal kernel — exp_dk","text":"","code":"exp_dk(r = 0:10) #>  [1] 1.591549e-01 5.854983e-02 2.153928e-02 7.923858e-03 2.915024e-03 #>  [6] 1.072378e-03 3.945057e-04 1.451305e-04 5.339054e-05 1.964128e-05 #> [11] 7.225623e-06 exp_dk(r = 0:10, a = 5) #>  [1] 0.0063661977 0.0052122019 0.0042673900 0.0034938434 0.0028605170 #>  [6] 0.0023419933 0.0019174619 0.0015698850 0.0012853132 0.0010523254 #> [11] 0.0008615712"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/fill_time_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill time gaps in data.frame — fill_time_gaps","title":"Fill time gaps in data.frame — fill_time_gaps","text":"Fill time gaps data.frame","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/fill_time_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill time gaps in data.frame — fill_time_gaps","text":"","code":"fill_time_gaps(   dat,   t_col,   interval = \"auto\",   max_interval = 60,   impute = FALSE )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/fill_time_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill time gaps in data.frame — fill_time_gaps","text":"dat data.frame data.table column times t_col character, colname column containing times interval numeric, expected time interval minutes times max_interval numeric, maximum acceptable interval data observaions minutes. impute logical, operation, possible future functionability. default FALSE","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/fill_time_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill time gaps in data.frame — fill_time_gaps","text":"data.table, extra rows containing times gaps","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/fill_time_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill time gaps in data.frame — fill_time_gaps","text":"","code":"# import BOM data file brisvegas <-   system.file(\"extdata\", \"bris_weather_obs.csv\", package = \"epiphytoolR\") bris <- data.table::fread(brisvegas) #> Warning: Some columns are type 'integer64' but package bit64 is not installed. Those columns will print as strange looking floating point data. There is no need to reload the data. Simply install.packages('bit64') to obtain the integer64 print method and print the data again. dim(bris) #> [1] 2029   45  bris$aifstime_utc <- as.POSIXct(bris$aifstime_utc,tz = \"UTC\") bris <- fill_time_gaps(bris,\"aifstime_utc\") dim(bris) #> [1] 2077   45"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Format weather data into a standardised format. — format_weather","title":"Format weather data into a standardised format. — format_weather","text":"Formats raw weather data object suitable use affiliated spore dispersal packages ascotraceR blackspot.sp. standardised data format ensures supplied weather data meet requirements functions aforementioned packages. Input weather data expects 'long' data format, line observation point time.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format weather data into a standardised format. — format_weather","text":"","code":"format_weather(   w,   YYYY = NULL,   MM = NULL,   DD = NULL,   hh = NULL,   mm = NULL,   ss = NULL,   POSIXct_time = NULL,   time_zone = NULL,   temp,   rain,   rh,   ws,   wd,   wd_sd,   station,   lon = NULL,   lat = NULL,   lonlat_file = NULL,   print_warnings = TRUE,   muffle_warnings = FALSE,   data_check = TRUE )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format weather data into a standardised format. — format_weather","text":"w data.frame object weather station data formatting. YYYY Column name character index w refers year weather logged. MM Column name character index w refers month (numerical) weather logged. DD Column name character index w refers day month weather logged. hh Column name character index w refers hour (24 hour) weather logged. mm Column name character index w refers minute weather logged. ss Column name character index w refers second weather logged. POSIXct_time Column name character index w contains POSIXct formatted time. can used instead arguments YYYY, MM, DD, hh, mm.. time_zone Time zone (Olsen time zone format) character weather station located. May column supplied character string. Optional, see also r. See details. temp Column name character index x refers temperature degrees Celsius. rain Column name character index w refers rainfall millimetres. rh Column name character index w refers relative humidity percentage. ws Column name character index w refers wind speed km / h. wd Column name character index w refers wind direction degrees. wd_sd Column name character index w refers wind speed columns standard deviation.  applicable weather data already summarised hourly increments. See details. station Column name character index w refers weather station name identifier. See details. lon Column name character index w refers weather station's longitude. See details. lat Column name character index w refers weather station's latitude. See details. lonlat_file file path (character) CSV included station name/id longitude latitude coordinates supplied data. Optional, see also lon lat. print_warnings default TRUE. FALSE, warnings printed console aggregating weather data hourly time intervals instead captured exported object warn$captured_warnings can retrieved function check_weather_warnings(). muffle_warnings default FALSE. TRUE warnings messages muffled printed console. use lot NA wind data aware happy ignore. data_check TRUE, checks NA values 'rain', 'temp', 'rh', 'wd' 'ws' data values unlikely. Use character vector variable names, (wither 'rain', 'temp', 'rh', 'wd' 'ws') check data specific variables. FALSE ignores variables cause subsequent models using data fail.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format weather data into a standardised format. — format_weather","text":"epiphy.weather object (extension data.table) containing supplied weather aggregated hour suitable format use disease models. Depending input weather, classes given output object indicate models meets data requirements . columns returned follows:","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format weather data into a standardised format. — format_weather","text":"time_zone time-zone time recorded. weather stations w must fall within time-zone.  required stations located differing time zones, format_weather() run separately object, data can combined formatting. wd_sd weather data provided hourly increments, column standard deviation wind direction hour required provided. weather data sub-hourly, standard deviation calculated returned automatically. lon, lat lonlat_file w provides longitude latitude values station locations, may specified lon lat columns.  coordinates relevant study location NA can specified function drop column variables.  data included, (NULL) separate file may provided contains longitude, latitude matching station name provide station locations final epiphy.weather object created specifying file path CSV file using lonlat_file.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/format_weather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format weather data into a standardised format. — format_weather","text":"","code":"# Weather data files for Newmarracara for testing and examples have been # included in ascotraceR. The weather data files both are of the same format, # so they will be combined for formatting here.  # load the weather data to be formatted scaddan <-    system.file(\"extdata\", \"scaddan_weather.csv\",package = \"epiphytoolR\") naddacs <-    system.file(\"extdata\", \"naddacs_weather.csv\",package = \"epiphytoolR\")  weather_file_list <- list(scaddan, naddacs) weather_station_data <-    lapply(X = weather_file_list, FUN = read.csv)  weather_station_data <- do.call(\"rbind\", weather_station_data)  weather_station_data$Local.Time <-    as.POSIXct(weather_station_data$Local.Time, format = \"%Y-%m-%d %H:%M:%S\",               tz = \"UTC\")  weather <- format_weather(    w = weather_station_data,    POSIXct_time = \"Local.Time\",    ws = \"meanWindSpeeds\",    wd_sd = \"stdDevWindDirections\",    rain = \"Rainfall\",    temp = \"Temperature\",    wd = \"meanWindDirections\",    lon = \"Station.Longitude\",    lat = \"Station.Latitude\",    station = \"StationID\",    time_zone = \"UTC\" ) #> Warning: All relative humidity values are 'NA' or missing, check data if this is not intentional  # Reformat saved weather  # Create file path and save data file_path_name <- paste(tempdir(), \"weather_saved.csv\", sep = \"\\\\\") write.csv(weather, file = file_path_name,           row.names = FALSE)  # Read data back in to weather2 <- read.csv(file_path_name, stringsAsFactors = FALSE)  # reformat the data to have appropriate column classes and data class weather2 <- format_weather(weather2,                            time_zone = \"UTC\") #> Warning: All relative humidity values are 'NA' or missing, check data if this is not intentional unlink(file_path_name) # remove temporary weather file"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_bom_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Download state weather observations — get_bom_observations","title":"Download state weather observations — get_bom_observations","text":"Function downloads compressed file desegnated location. downloaded file contains three file formats automated weather station, xml, axf, json. FTP url needed function, find Bureau Meterology website. Please read copyright disclaimer use data .","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_bom_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download state weather observations — get_bom_observations","text":"","code":"get_bom_observations(   ftp_url,   download_location,   access_warning = TRUE,   state = \"QLD\",   file_prefix = format(Sys.time(), format = \"%y%m%d_%H%M\") )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_bom_observations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download state weather observations — get_bom_observations","text":"http://reg.bom.gov.au/catalogue/data-feeds.shtml#obs-state ; http://www.bom.gov.au//copyright.shtml; http://reg.bom.gov.au//disclaimer.shtml","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_bom_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download state weather observations — get_bom_observations","text":"ftp_url character, ftp url obtained BOMs website download_location character, Folder location download compreseed data access_warning logical, default = TRUE. Elects whether print warning function run state character, Australian state weather observations files downloaded. Options include \"QLD\",\"NSW\",\"NT\",\"VIC\",\"SA\", \"TAS\",\"WA\" file_prefix character, prefix applied file name. Default date time hours minutes.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_bom_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download state weather observations — get_bom_observations","text":"character string download file loaction downloaded compressed file .tgz","code":""},{"path":[]},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weather coefficients — get_weather_coefs","title":"Calculate weather coefficients — get_weather_coefs","text":"Calculate weather coefficients","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weather coefficients — get_weather_coefs","text":"","code":"get_weather_coefs(   raw_bom_file,   rolling_window = 60,   meta_data,   i_year = 2020,   rainfall_na_fill = \"mean\" )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weather coefficients — get_weather_coefs","text":"raw_bom_file character, file path raw bureau Meteorology txt file rolling_window integer, number days summarise rolling window meta_data data.table Bureau Meteorology, meta-data i_year integer, year coeffients likely imputed. Defaults 2020 rainfall_na_fill numeric proportion, likihood rain fill NA values Defaults rainfall_na_fill = \"mean\", takes overall mean proportion.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weather coefficients — get_weather_coefs","text":"data.table, coefficients estimate weather rainfall event. rainfall data recorded raw weather NULL returned without warning. wd_rw, mean wind direction rolling window; wd_sd_rw, standard deviation wind direction rolling window; ws_rw, mean wind speed rolling window; ws_sd_rw, standard deviation speed rolling window; rain_freq, historical probability rainfall day based rolling window. data.table coefficients estimate weather rainfall event. rainfall data recorded raw weather NULL returned without warning. station_name - Weather station name; lat - latitude; lon - longitude; state - political juristiction state; yearday - integer, day year, see data.table::yday(); temp - numeric, mean temperature; rh - numeric, mean temperature; wd_rd - numeric, mean wind direction rolling window; wd_sd_rd - numeric, standard deviation wind direction rolling window; ws_rd - numeric, mean wind speed rolling window; ws_sd_rd - numeric, standard deviation speed rolling window; rain_freq - numeric, proportional chance rainfall day 0 - 1 based rolling window.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate weather coefficients — get_weather_coefs","text":"get_weather_coefs uses historical bom rainfall data determine probability rainfall day year. also summarises mean temperatures, wind speed direction time rainfall. Formally called impute_rainywind","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/get_weather_coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weather coefficients — get_weather_coefs","text":"","code":"if (FALSE) { library(data.table) meta_dat <- fread(\"cache/bom_stations.csv\") imp_dat <-    get_weather_coefs(raw_bom_file = \"./data/Weather_data/HD01D_Data_090182_999999999959761.txt\",                     rolling_window = 60,                     meta_data = meta_dat)}"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute hourly diurnal weather fluctuations. — impute_diurnal","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"Impute hourly diurnal weather fluctuations.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"","code":"impute_diurnal(   h = 1:24,   max_obs = 95,   min_obs = 45,   max_hour = 4,   min_hour = 15,   l_out = 24,   ind_out = \"all\" )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"h numeric POSIX, vector. numeric vectors indicate hour return. POSIX formatted vector can also used imputed relative humidity hour returned. max_obs numeric, maximum daily observation relative humidity temperature min_obs numeric, minimum daily observation relative humidity temperature max_hour integer, hour day maximum observation made. min_hour integer, hour day minimum observation made. l_out integer, length function. 24 hourly observations (default. 1440 minute. 48 half hourly Still Experimental! ind_out integer, select output useing index number similar 1:10[ind_out]","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"numeric vector equal length h. respective hour day","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"Impute hourly fluctuations temperature relative humidity daily maximums minimums. function uses sin function estimate diurnal fluctuations temperature humidity.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_diurnal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute hourly diurnal weather fluctuations. — impute_diurnal","text":"","code":"impute_diurnal() #>  [1] 88.71273 92.13637 94.27353 95.00000 93.98733 91.03135 86.37153 80.38540 #>  [9] 73.55790 66.44216 59.61465 53.62851 48.96868 46.01269 45.00000 45.72644 #> [17] 47.86358 51.28720 55.79834 61.13483 66.98653 73.01336 78.86507 84.20157 impute_diurnal(Sys.time()) #> [1] 88.71273 impute_diurnal(max_obs = 22,                min_obs = 18) #>  [1] 21.49702 21.77091 21.94188 22.00000 21.91899 21.68251 21.30972 20.83083 #>  [9] 20.28463 19.71537 19.16917 18.69028 18.31749 18.08101 18.00000 18.05812 #> [17] 18.22909 18.50298 18.86387 19.29079 19.75892 20.24107 20.70921 21.13613 impute_diurnal(max_hour = 3,                min_hour = 9) #>  [1] 93.49229 94.62018 95.00000 91.65064 82.50002 70.00003 57.50003 48.34938 #>  [9] 45.00000 45.37980 46.50767 48.34934 50.84886 53.93027 57.49996 61.44945 #> [17] 65.65874 69.99994 74.34115 78.55045 82.49995 86.06964 89.15107 91.65060 impute_diurnal(max_obs = 99,                min_obs = 45) #>  [1] 92.20974 95.90728 98.21541 99.00000 97.90632 94.71386 89.68126 83.21623 #>  [9] 75.84253 68.15753 60.78383 54.31879 49.28618 46.09370 45.00000 45.78456 #> [17] 48.09266 51.79017 56.66221 62.42561 68.74545 75.25443 81.57427 87.33769 impute_diurnal(max_hour = 6,                min_hour = 14) #>  [1] 83.88920 87.67762 90.78670 93.09696 94.51962 95.00000 93.09700 87.67768 #>  [9] 79.56711 70.00003 60.43294 52.32236 46.90303 45.00000 45.48036 46.90299 #> [17] 49.21323 52.32230 56.11070 60.43287 65.12269 69.99994 74.87720 79.56703  w_dt <- weather w_dt[3000 : 3050, temp := NA_real_] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm #>        <num>  <char> <num> <num> <int> <int> <num> #>    1: -33.26 naddacs  2020     4    13     1     0 #>    2: -33.26 naddacs  2020     4    13     2     0 #>    3: -33.26 naddacs  2020     4    13     3     0 #>    4: -33.26 naddacs  2020     4    13     4     0 #>    5: -33.26 naddacs  2020     4    13     5     0 #>   ---                                              #> 8782: -33.13 scaddan  2020    10    12    21     0 #> 8783: -33.13 scaddan  2020    10    12    22     0 #> 8784: -33.13 scaddan  2020    10    12    23     0 #> 8785: -33.13 scaddan  2020    10    13     0     0 #> 8786: -33.13 scaddan  2020    10    13     1     0 plot(w_dt[2900:3200, temp], type = \"l\")  rolling_window <- 24 w_dt[, tm_imp := round(data.table::frollapply(                       data.table::hour(times),                       n = rolling_window,                       fill = NA_real_,                       FUN = impute_diurnal,                       max_obs = max(temp, na.rm = TRUE),                       min_obs = min(temp, na.rm = TRUE),                       max_hour = data.table::hour(times[which(temp == max(temp, na.rm = TRUE))]),                       min_hour = data.table::hour(times[which(temp == min(temp, na.rm = TRUE))]),                       align = \"center\",                       ind_out = ceiling(rolling_window/2)),3)] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm tm_imp #>        <num>  <char> <num> <num> <int> <int> <num>  <num> #>    1: -33.26 naddacs  2020     4    13     1     0     NA #>    2: -33.26 naddacs  2020     4    13     2     0     NA #>    3: -33.26 naddacs  2020     4    13     3     0     NA #>    4: -33.26 naddacs  2020     4    13     4     0     NA #>    5: -33.26 naddacs  2020     4    13     5     0     NA #>   ---                                                     #> 8782: -33.13 scaddan  2020    10    12    21     0     NA #> 8783: -33.13 scaddan  2020    10    12    22     0     NA #> 8784: -33.13 scaddan  2020    10    12    23     0     NA #> 8785: -33.13 scaddan  2020    10    13     0     0     NA #> 8786: -33.13 scaddan  2020    10    13     1     0     NA plot(w_dt[2900:3200, temp], type = \"l\") lines(w_dt[2900:3200, tm_imp], type = \"l\", col = \"red\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Imputation — impute_fill","title":"Fill Imputation — impute_fill","text":"Imputes new vector variables can used fill NA values.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Imputation — impute_fill","text":"","code":"impute_fill(ind, var, times, FUN_n)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Imputation — impute_fill","text":"ind index vector var numeric vector values containing NA_real values imputation times POSIXct vector time hourly increments FUN_n rolling window size","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Imputation — impute_fill","text":"vector var values filling NA","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Imputation — impute_fill","text":"","code":"dt <- weather rolling_window <- length(dt[is.na(temp),temp])*2 dt[,indx := .I] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm  indx #>        <num>  <char> <num> <num> <int> <int> <num> <int> #>    1: -33.26 naddacs  2020     4    13     1     0     1 #>    2: -33.26 naddacs  2020     4    13     2     0     2 #>    3: -33.26 naddacs  2020     4    13     3     0     3 #>    4: -33.26 naddacs  2020     4    13     4     0     4 #>    5: -33.26 naddacs  2020     4    13     5     0     5 #>   ---                                                    #> 8782: -33.13 scaddan  2020    10    12    21     0  8782 #> 8783: -33.13 scaddan  2020    10    12    22     0  8783 #> 8784: -33.13 scaddan  2020    10    12    23     0  8784 #> 8785: -33.13 scaddan  2020    10    13     0     0  8785 #> 8786: -33.13 scaddan  2020    10    13     1     0  8786  dt[, tm_imp := round(data.table::frollapply(   indx,   n = rolling_window,   fill = NA_real_,   FUN = impute_fill,   FUN_n = rolling_window,   times = times,   var = temp,   align = \"center\"   ),3)] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm  indx tm_imp #>        <num>  <char> <num> <num> <int> <int> <num> <int>  <num> #>    1: -33.26 naddacs  2020     4    13     1     0     1     NA #>    2: -33.26 naddacs  2020     4    13     2     0     2     NA #>    3: -33.26 naddacs  2020     4    13     3     0     3     NA #>    4: -33.26 naddacs  2020     4    13     4     0     4     NA #>    5: -33.26 naddacs  2020     4    13     5     0     5     NA #>   ---                                                           #> 8782: -33.13 scaddan  2020    10    12    21     0  8782     NA #> 8783: -33.13 scaddan  2020    10    12    22     0  8783     NA #> 8784: -33.13 scaddan  2020    10    12    23     0  8784     NA #> 8785: -33.13 scaddan  2020    10    13     0     0  8785     NA #> 8786: -33.13 scaddan  2020    10    13     1     0  8786     NA  plot(dt[2950:3100, temp], type = \"l\") lines(dt[2950:3100, tm_imp], type = \"l\", col = \"red\")"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Relative Humidity — impute_rh","title":"Impute Relative Humidity — impute_rh","text":"Impute Relative Humidity","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Relative Humidity — impute_rh","text":"","code":"impute_rh(w, rolling_window = 40)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Relative Humidity — impute_rh","text":"w Weather data class epiphy.weather, output epiphytoolR::format_weather() rolling_window integer, number hours used determine rolling window","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Relative Humidity — impute_rh","text":"Weather data class epiphy.weather, See  epiphytoolR::format_weather()","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute Relative Humidity — impute_rh","text":"Impute missing relative humidity using rolling impute fill function epiphy.weather class data.table. epiphy.weather class created epiphytoolR::format_weather()","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_rh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Relative Humidity — impute_rh","text":"","code":"set.seed(111) weather[round(rnorm(50,                     mean = nrow(weather)/2,                     sd = nrow(weather)/10)),         rh := NA_real_] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm #>        <num>  <char> <num> <num> <int> <int> <num> #>    1: -33.26 naddacs  2020     4    13     1     0 #>    2: -33.26 naddacs  2020     4    13     2     0 #>    3: -33.26 naddacs  2020     4    13     3     0 #>    4: -33.26 naddacs  2020     4    13     4     0 #>    5: -33.26 naddacs  2020     4    13     5     0 #>   ---                                              #> 8782: -33.13 scaddan  2020    10    12    21     0 #> 8783: -33.13 scaddan  2020    10    12    22     0 #> 8784: -33.13 scaddan  2020    10    12    23     0 #> 8785: -33.13 scaddan  2020    10    13     0     0 #> 8786: -33.13 scaddan  2020    10    13     1     0 w2 <- impute_rh(weather)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Temperatures — impute_temp","title":"Impute Temperatures — impute_temp","text":"Impute Temperatures","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Temperatures — impute_temp","text":"","code":"impute_temp(w, rolling_window = 40)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Temperatures — impute_temp","text":"w Weather data class epiphy.weather, output epiphytoolR::format_weather() rolling_window integer, number hours used determine rolling window","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Temperatures — impute_temp","text":"Weather data class epiphy.weather, See  epiphytoolR::format_weather()","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute Temperatures — impute_temp","text":"Impute missing temperatures using rolling impute fill function epiphy.weather class data.table. epiphy.weather class created epiphytoolR::format_weather()","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/impute_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Temperatures — impute_temp","text":"","code":"set.seed(111) weather[round(rnorm(50,                     mean = nrow(weather)/2,                     sd = nrow(weather)/10)),         temp := NA_real_] #> Index: <station> #>                     times      temp    rh  rain    ws    wd        wd_sd    lon #>                    <POSc>     <num> <num> <num> <num> <num>        <num>  <num> #>    1: 2020-04-13 01:00:00 11.710215   NaN   0.2   1.9   303 0.000000e+00 135.86 #>    2: 2020-04-13 02:00:00  8.591594   NaN   0.0   1.0    38 0.000000e+00 135.86 #>    3: 2020-04-13 03:00:00  5.029886   NaN   0.0   3.5    15 0.000000e+00 135.86 #>    4: 2020-04-13 04:00:00  7.329537   NaN   0.0   0.4   194 8.537737e-07 135.86 #>    5: 2020-04-13 05:00:00  4.867557   NaN   0.4   1.9   276 0.000000e+00 135.86 #>   ---                                                                           #> 8782: 2020-10-12 21:00:00 14.505099   NaN   0.0   1.6   189 0.000000e+00 135.73 #> 8783: 2020-10-12 22:00:00 16.143942   NaN   0.0   1.2   163 0.000000e+00 135.73 #> 8784: 2020-10-12 23:00:00 10.410922   NaN   0.0   3.4   137 0.000000e+00 135.73 #> 8785: 2020-10-13 00:00:00  7.722190   NaN   0.0   3.3   117 0.000000e+00 135.73 #> 8786: 2020-10-13 01:00:00  5.800267   NaN   0.0   3.6   112 0.000000e+00 135.73 #>          lat station  YYYY    MM    DD    hh    mm #>        <num>  <char> <num> <num> <int> <int> <num> #>    1: -33.26 naddacs  2020     4    13     1     0 #>    2: -33.26 naddacs  2020     4    13     2     0 #>    3: -33.26 naddacs  2020     4    13     3     0 #>    4: -33.26 naddacs  2020     4    13     4     0 #>    5: -33.26 naddacs  2020     4    13     5     0 #>   ---                                              #> 8782: -33.13 scaddan  2020    10    12    21     0 #> 8783: -33.13 scaddan  2020    10    12    22     0 #> 8784: -33.13 scaddan  2020    10    12    23     0 #> 8785: -33.13 scaddan  2020    10    13     0     0 #> 8786: -33.13 scaddan  2020    10    13     1     0 w2 <- impute_temp(weather)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/make_bom_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock Bureau of Meteorology weather data — make_bom_data","title":"Mock Bureau of Meteorology weather data — make_bom_data","text":"Simulated raw weather data AWS weather station","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/make_bom_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Bureau of Meteorology weather data — make_bom_data","text":"","code":"make_bom_data()"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/make_bom_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock Bureau of Meteorology weather data — make_bom_data","text":"simlulated","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/make_bom_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mock Bureau of Meteorology weather data — make_bom_data","text":"data frame 8,786 rows 15 columns: times record time weather station temp hourly mean temperature degrees rh hourly mean relative humidity","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/make_bom_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock Bureau of Meteorology weather data — make_bom_data","text":"","code":"raw_bom <- make_bom_data()"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/merge_axf_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge BOM axf weather data — merge_axf_weather","title":"Merge BOM axf weather data — merge_axf_weather","text":"@details function takes new BOM axf files hold 72 hours weather observations","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/merge_axf_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge BOM axf weather data — merge_axf_weather","text":"","code":"merge_axf_weather(   File_compressed,   File_axf = \"IDQ60910.99123.axf\",   File_formatted = \"NTamborine.csv\",   base_dir = getwd(),   verbose = FALSE )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/merge_axf_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge BOM axf weather data — merge_axf_weather","text":"File_compressed character, file path compressed weather file \"tgz\" File_axf character, filename axf weather data observation file bom File_formatted character, filename path formated file previously merged data base_dir character file path giving base directory file_formatted verbose logical print extra messages asssist debugging","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/merge_axf_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge BOM axf weather data — merge_axf_weather","text":"data.table, merged dataset","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/multi_var_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Splash dispersal multi-binomial in a pixel — multi_var_binom","title":"Splash dispersal multi-binomial in a pixel — multi_var_binom","text":"Generate two dimensional probability distribution representing probability spore dispersal inoculum source. Generates probability distribution entry representing single plant. Pixel size represents whole spatial size","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/multi_var_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splash dispersal multi-binomial in a pixel — multi_var_binom","text":"","code":"multi_var_binom(   row_spacing = 0.3,   stdev = NULL,   px = 1,   seeding_r = 40,   IO = 1,   m )"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/multi_var_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splash dispersal multi-binomial in a pixel — multi_var_binom","text":"row_spacing Crop row spacing meters stdev Standard deviation splash distribution. defaults pixel size px pixel size, length width square pixel seeding_r number plants sown pixel (px) IO number infective sites within pixel m (optional) matrix representing plant number infective sites plant","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/multi_var_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splash dispersal multi-binomial in a pixel — multi_var_binom","text":"probability matrix entry gives probability splash dispersal infective sites respective entry","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/multi_var_binom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splash dispersal multi-binomial in a pixel — multi_var_binom","text":"","code":"set.seed(7) # obtain matrix of probabilities mvb <- multi_var_binom() image(t(mvb))  # sample the plant (matrix cell) where the spore may drop sample(seq_along(mvb), size = 10, prob = mvb, replace = TRUE) #>  [1] 20 20 19  7 21 44 20 21 20 19 # sample the cardinal coordinates (matrix cell) where the spore may drop sam_mvb <- sample(seq_along(mvb), size = 10, prob = mvb, replace = TRUE) data.frame(x = sapply(sam_mvb,FUN = function(x) ceiling(x/ nrow(mvb))),            y = sapply(sam_mvb,FUN = function(x) x %% nrow(mvb))) #>    x y #> 1  1 7 #> 2  2 8 #> 3  2 9 #> 4  2 8 #> 5  1 8 #> 6  2 8 #> 7  4 9 #> 8  2 7 #> 9  1 8 #> 10 2 7  # simulate spore dispersal over 40 spread events for(sp in 1:40){ if(sp == 1){   m1 <- multi_var_binom()   m0 <- matrix(0,nrow = nrow(m1),ncol = ncol(m1))   ind1 <- sample(seq_along(m1), size = 1, prob = m1, replace = TRUE)   m0[ind1] <- 1 }else{   m1 <- multi_var_binom(m = m0)   ind1 <- sample(seq_along(m1), size = 1, prob = m1, replace = TRUE)   m0[ind1] <- m0[ind1] + 1 } } image(t(m1))"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":null,"dir":"Reference","previous_headings":"","what":"Power law dispersal kernal — power_dk","title":"Power law dispersal kernal — power_dk","text":"Dispersal kernal using power law, described Sackett Mundt (2005)","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power law dispersal kernal — power_dk","text":"","code":"power_dk(x, a = 184.9, b = 2.07)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power law dispersal kernal — power_dk","text":"x numeric, Distance meters. numeric, scale parameter proportional strength source inoculum. Defaults parameter used stripe rust (Pucinnia striiformis) dispersal Sackett Mundt (2005). b numeric, dimensionless parameter controlling steepness gradient. Defaults parameter used stripe rust (Pucinnia striiformis) dispersal Sackett Mundt (2005).","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power law dispersal kernal — power_dk","text":"estimated lesions per leaf","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power law dispersal kernal — power_dk","text":"https://apsjournals.apsnet.org/doi/pdf/10.1094/PHYTO-95-0983","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/power_dk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power law dispersal kernal — power_dk","text":"","code":"power_dk(5) #> [1] 6.607984 power_dk(1:20) #>  [1] 184.9000000  44.0356915  19.0237405  10.4875182   6.6079843   4.5306845 #>  [7]   3.2929411   2.4977021   1.9572888   1.5737542   1.2919748   1.0790256 #> [13]   0.9142694   0.7842452   0.6798733   0.5948515   0.5246959   0.4661469 #> [19]   0.4167897   0.3748045"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated weather data — weather","title":"Simulated weather data — weather","text":"Simulated weather data two weather stations","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated weather data — weather","text":"","code":"weather"},{"path":[]},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/weather.html","id":"weather","dir":"Reference","previous_headings":"","what":"weather","title":"Simulated weather data — weather","text":"data frame 8,786 rows 15 columns: times record time weather station temp hourly mean temperature degrees rh hourly mean relative humidity","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/weather.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated weather data — weather","text":"simlulated","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","title":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","text":"wind_angle() samples normal distribution estimate bearing spore conidia dispersal wind.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","text":"","code":"wind_angle(mean_wind_direction, stdev_wind_direction, PSPH = 1, min_stdev = 1)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","text":"mean_wind_direction numeric vector representing mean wind direction particular time interval stdev_wind_direction Refer standard deviation wind_direction particular time interval PSPH numeric vector, estimated .estimate_spore_discharge() min_stdev minimum possible standard deviation wind direction permitted. reflect turbulent effect wind movements prevent std deviations near zero wind direction averaged.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","text":"numeric vector giving information angle component conidia dispersed wind driven rain.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates Bearing Conidia Dispersed by Wind Driven Rain — wind_angle","text":"","code":"wind_angle(10, 2) # returns a single estimate #> [1] 10.22131 wind_angle(10, 2, PSPH = 10) # returns 10 estimates #>  [1]  9.843066  9.159019  8.875748 11.995027  7.789740  9.715424 10.629990 #>  [8] 12.437101  8.601366  9.429134 wind_angle(15, 2, PSPH = c(5, 5)) # returns 10 estimates #>  [1] 12.37689 14.21798 14.19695 17.70104 16.18238 15.20105 16.86214 14.47452 #>  [9] 14.98466 15.73431"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the distance of spore dispersal from wind speed — wind_distance","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"Samples half-Cauchy distribution estimate distance meters spore dispersed inoculum source meters due wind speed","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"","code":"wind_distance(mean_wind_speed, wind_cauchy_multiplier, PSPH = 1)"},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"mean_wind_speed numeric wind speed km / h wind_cauchy_multiplier scaling parameter estimate Cauchy distribution resembles mean distance spore travels due wind dispersal. PSPH numeric vector estimated '.estimate_spore_discharge()'","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"Numerical vector, returns distance spore dispersed wind source infection","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"wind_distance() Determines distance conidia disperse, metres, wind driven rain Conidia assumed spread centre subunit. destination subunit, conidia land, subunit another subunit within outside paddock.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/reference/wind_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the distance of spore dispersal from wind speed — wind_distance","text":"","code":"wind_distance(mean_wind_speed = 10,               wind_cauchy_multiplier = 50) # returns a single estimate #> [1] 69.39199 wind_distance(mean_wind_speed = 10,               wind_cauchy_multiplier = 50,               PSPH = 10) # returns 10 estimates #>  [1]   67.49703  453.85386  372.39819  762.45777 1478.05239   92.86874 #>  [7]  545.16284 1208.69113 1163.76161 2379.81873 wind_distance(mean_wind_speed = 10,               wind_cauchy_multiplier = 50,               PSPH = c(5, 5)) # returns 10 estimates #>  [1]  389.5521  326.3844  290.0274 5212.8388 5909.0490 2484.0168  416.8657 #>  [8]  658.7236  794.4378  470.9079"},{"path":"https://paulmelloy.github.io/epiphytoolR/news/index.html","id":"epiphytoolr-002","dir":"Changelog","previous_headings":"","what":"epiphytoolR 0.0.2","title":"epiphytoolR 0.0.2","text":"Make pkgdown site R function generate mock raw bom file testing examples make_bom_data() tests get_weather_coefs() patch bugs tests allow calc_estimated_weather return rh temp calc_estimated_weather() now returns epiphy.weather classed data.tables eliminating need subsequent parsing format_weather() new functions impute_temp() impute_rh() imputing temperatures relative humidity using impute_fill() rolling window function Add README.md calc_estimated_weather.R() Permit n_stations argument input integer single length provide number stations. detailed error warning messages, checks min max temperatures add na.rm argument cases NA data can’t removed manually Add functions estimating future weather environments.: calc_estimated_weather() impute_diurnal() get_weather_coefs() Better time format detection informative format_weather() errors. Add function fill_time_gaps() fills time gaps data.frame time vector. common many weather data sets missing data. function helps fill lines missing inserts NAs column variable inputs. New fictional internal dataset bris_weather_obs.csv weather testing practising use functions package. format reflect BOM weather data. format_weather() New feature allows data.checks specific variable. Previously nothing. now accepts relative humidity rh returns hourly mean.","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/news/index.html","id":"epiphytoolr-001","dir":"Changelog","previous_headings":"","what":"epiphytoolR 0.0.1","title":"epiphytoolR 0.0.1","text":"Initialise version 0.0.1 merge dev branch main. Package now import many packages incremented development","code":""},{"path":"https://paulmelloy.github.io/epiphytoolR/news/index.html","id":"epiphytoolr-0009001","dir":"Changelog","previous_headings":"","what":"epiphytoolR 0.0.0.9001","title":"epiphytoolR 0.0.0.9001","text":"Initialise news file Added scripts download BOM observational data state FTP server. See help(get_bom_observations) Bug fix format_weather() see issue #10. Detects midnight datetime corrects HMS formatting Bug fix format_weather() see issue #11. Internal function fill missing times work correctly formatting weather multiple stations.","code":""}]
